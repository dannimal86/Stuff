# Load required libraries
library(ggplot2)
library(dplyr)
library(lubridate)
library(scales)

# Read the CSV file
data <- read.csv("your_file.csv", stringsAsFactors = FALSE)

# Convert exchange_time to POSIXct format
data$exchange_time <- dmy_hms(data$exchange_time)

# Let's debug the data types
str(data)

# Ensure all numeric columns are properly converted to numeric
data <- data %>%
  mutate(
    orderquantity = as.numeric(orderquantity),
    leavequantity = as.numeric(leavequantity),
    executedqty = as.numeric(executedqty),
    orderprice = as.numeric(orderprice)
  )

# Calculate cumulative leave quantities by side, accounting for Non-Working actions
buy_data <- data %>%
  filter(side == "Buy") %>%
  arrange(exchange_time) %>%
  mutate(
    qty_change = case_when(
      action == "Non-Working" ~ -orderquantity,
      TRUE ~ leavequantity
    )
  ) %>%
  mutate(cum_qty = cumsum(as.numeric(qty_change)))

sell_data <- data %>%
  filter(side == "Sell") %>%
  arrange(exchange_time) %>%
  mutate(
    qty_change = case_when(
      action == "Non-Working" ~ -orderquantity,
      TRUE ~ leavequantity
    )
  ) %>%
  mutate(cum_qty = cumsum(as.numeric(qty_change)))

# Break down the net position calculation into steps for debugging
net_position <- data %>%
  arrange(exchange_time) %>%
  # Create a debugging column to check values
  mutate(
    exec_qty_numeric = as.numeric(executedqty),
    # Create change in position based on side
    exec_change = case_when(
      side == "Buy" ~ exec_qty_numeric,
      side == "Sell" ~ -exec_qty_numeric,
      TRUE ~ 0
    )
  )

# Check for NA or non-numeric values
summary(net_position$exec_change)
any(is.na(net_position$exec_change))

# Now complete the calculation
net_position <- net_position %>%
  # Replace NA values with 0
  mutate(exec_change = ifelse(is.na(exec_change), 0, exec_change)) %>%
  # Calculate cumulative sum
  mutate(net_position = cumsum(exec_change))

# Find the range of values for scaling the secondary axis
max_buy <- max(abs(buy_data$cum_qty), na.rm = TRUE)
max_sell <- max(abs(sell_data$cum_qty), na.rm = TRUE)
max_cum_qty <- max(max_buy, max_sell, na.rm = TRUE)
max_net_pos <- max(abs(net_position$net_position), na.rm = TRUE)
# Avoid division by zero
scaling_factor <- if(max_net_pos > 0) max_cum_qty / max_net_pos else 1

# Create the plot with lines
ggplot() +
  # Buy quantities
  geom_line(
    data = buy_data,
    aes(x = exchange_time, y = cum_qty, color = "Buy"),
    size = 1
  ) +
  # Sell quantities
  geom_line(
    data = sell_data, 
    aes(x = exchange_time, y = cum_qty, color = "Sell"),
    size = 1
  ) +
  # Net position
  geom_line(
    data = net_position,
    aes(x = exchange_time, y = net_position * scaling_factor, linetype = "Net Position"),
    color = "black",
    size = 1.2
  ) +
  scale_color_manual(
    name = "Side",
    values = c("Buy" = "blue", "Sell" = "red")
  ) +
  scale_linetype_manual(
    name = "Position",
    values = c("Net Position" = "solid")
  ) +
  scale_y_continuous(
    name = "Cumulative Leave Quantity",
    labels = scales::comma,
    sec.axis = sec_axis(
      ~ . / scaling_factor,
      name = "Net Position (Executed Qty)",
      labels = scales::comma
    )
  ) +
  labs(
    title = "Order Activity Over Time",
    x = "Time"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    legend.position = "top"
  )
